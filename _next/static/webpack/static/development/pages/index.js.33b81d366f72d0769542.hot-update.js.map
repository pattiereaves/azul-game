{"version":3,"file":"static/webpack/static/development/pages/index.js.33b81d366f72d0769542.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Component } from 'react';\nimport localStorage from 'local-storage';\nimport { ThemeProvider } from 'mineral-ui/themes';\nimport Select from 'mineral-ui/Select';\nimport Button from 'mineral-ui/Button';\nimport Player from '../components/Player';\nimport FactoryDisplay from '../components/FactoryDisplay'; // eslint-disable-line\nimport generateTilebag from '../services/tilebag';\n\nexport default class Index extends Component {\n  state = {\n    playerCount: false,\n    currentPlayer: 0,\n    tileBag: generateTilebag(),\n    isReadyToPlay: false,\n    factoryDisplays: [],\n  };\n\n  possiblePlayers = [\n    {\n      text: '2',\n      value: '2',\n    },\n    {\n      text: '3',\n      value: '3',\n    },\n    {\n      text: '4',\n      value: '4',\n    },\n  ];\n\n  possibleFactoryDisplays = [\n    {\n      players: 2,\n      factoryDisplays: 5,\n    },\n    {\n      players: 3,\n      factoryDisplays: 7,\n    },\n    {\n      players: 4,\n      factoryDisplays: 9,\n    },\n  ];\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n  }\n\n  setUpRound = () => {\n    // Layout factory display thingys\n    // Put the tiles on the things.\n    // const { factoryDisplayCount } = this.state;\n    const { playerCount } = this.state;\n    const factoryDisplayCount = this.determineFactoryDisplayCount(playerCount);\n\n    const factoryDisplays = Array(factoryDisplayCount)\n      .fill([])\n      .map(() => this.drawTiles());\n\n    // if there are tiles in the bag, give them 4.\n    // Otherwise build a new bag, then give them 4.\n    // <FactoryDisplay tiles=[0,2,4,0] />\n\n    this.setState({ isReadyToPlay: true, factoryDisplays });\n  }\n\n  drawTiles = () => {\n    // return 4 tiles.\n    // remove those tiles from the state.\n    const { tileBag } = this.state;\n    const tilesToDraw = tileBag.splice(0, 4);\n    this.setState({ tileBag });\n\n    if (tilesToDraw.length === 4) {\n      return tilesToDraw;\n    }\n\n    // Refresh bag and draw if not enough.\n    const newTilebag = generateTilebag();\n    const newTiles = newTilebag.splice(0, 4);\n    this.setState({ tileBag: newTilebag });\n    return newTiles;\n  }\n\n  handleChange = ({ value }) => {\n    const playerCount = Number(value);\n    this.setState({ playerCount });\n    localStorage('playerCount', playerCount);\n  };\n\n  hydrateStateWithLocalStorage = () => {\n    const { state } = this;\n\n    Object.keys(state).forEach((key) => {\n      const value = localStorage.get(key);\n\n      if (!value) {\n        return;\n      }\n\n      this.setState({ [key]: JSON.parse(value) });\n    });\n  };\n\n  determineFactoryDisplayCount = (playerCount) => {\n    if (!playerCount) {\n      return false;\n    }\n\n    const { factoryDisplays } = this.possibleFactoryDisplays\n      .find(({ players }) => (players === playerCount));\n\n    return factoryDisplays;\n  }\n\n  // Once the players are selected, that determines\n  // the number of mats to display.\n\n\n  render() {\n    const { possiblePlayers, handleChange } = this;\n    const {\n      playerCount, currentPlayer, tileBag, isReadyToPlay, factoryDisplays,\n    } = this.state;\n\n    console.log({\n      currentPlayer, tileBag, possiblePlayers, factoryDisplays,\n    });\n\n    return (\n      <ThemeProvider>\n        <div>\n          {!playerCount && (\n            <div>\n              <p>How many players are there?</p>\n              <Select\n                data={possiblePlayers}\n                onChange={handleChange}\n                placeholder=\"Choose a number\"\n                required\n              />\n            </div>\n          )}\n          {playerCount && (\n          <div>\nPlayer count:\n            {playerCount}\n          </div>\n          )}\n          {!isReadyToPlay && (<Button primary onClick={this.setUpRound}>Draw tiles</Button>)}\n          {factoryDisplays.map(tiles => (<FactoryDisplay tiles={tiles} />))}\n          <h1>Todo</h1>\n          <ul>\n            <li>Make the player grid</li>\n            <li>Make a component to hold the tiles</li>\n            <li>Make a component to hold the mats</li>\n          </ul>\n          <Player />\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AASA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AANA;AACA;AAOA;AACA;AACA;;;;;;AAtEA;AACA;AACA;;;AAqEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA5JA;AACA;;;;;A","sourceRoot":""}