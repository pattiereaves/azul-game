{"version":3,"file":"static/webpack/static/development/pages/index.js.f6ee2780d5bfd4737b5c.hot-update.js","sources":["webpack:///./components/PatternLines.js","webpack:///./components/Player.js"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'mineral-ui/Button';\n\nexport default class FloorLines extends PureComponent {\n  static propTypes = {\n    lines: PropTypes.arrayOf(\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.number])),\n    ).isRequired,\n  };\n\n  render() {\n    const { patternLines } = this.props;\n    return (\n      <div>\n        {lines.map(line => (\n          line.map(tile => (<Button>{tile}</Button>))\n        ))}\n      </div>\n    );\n  }\n}\n","import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport IconCheck from 'mineral-ui-icons/IconCheck';\nimport Button from 'mineral-ui/Button';\nimport PatternLines from './PatternLines';\n\nexport default class Player extends PureComponent {\n  static propTypes = {\n    isCurrentPlayer: PropTypes.bool.isRequired,\n    handleTurnEnd: PropTypes.func.isRequired,\n    playerID: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n      tilesToPlace: PropTypes.array.isRequired,\n      score: PropTypes.number.isRequired,\n      willBeFirstNextRound: PropTypes.bool.isRequired,\n      patternLines: PropTypes.arrayOf(\n        PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.number])),\n      ).isRequired,\n      floorLine: PropTypes.arrayOf(PropTypes.number).isRequired,\n    }).isRequired,\n  };\n\n  // if there are tiles to place, show the floor lines.\n  // a button for which pattern line to fill\n  // if there are more tiles than pattern line, push the remaining to the floorLine\n  // need option to send all tiles to the floorline\n  // need to gray out pattern lines that aren't the same tile type\n  // (button to place should only appear for legal moves)\n  // after placing tiles on pattern line, move to next turn.\n  // Create this logic in the index.js file.\n\n  render() {\n    const {\n      isCurrentPlayer, handleTurnEnd, playerID, data, patternLines: lines,\n    } = this.props;\n    const { tilesToPlace } = data;\n\n    return (\n      <div>\n        {isCurrentPlayer && <IconCheck title=\"This is the current player\" />}\n        Player\n        {' '}\n        {playerID}\n        {isCurrentPlayer && (<Button onClick={() => handleTurnEnd(playerID)}>End turn</Button>)}\n        {tilesToPlace.map(tile => <Button>{tile}</Button>)}\n        <PatternLines lines={lines} />\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;;;;AAhBA;AACA;AADA;AAEA;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA1CA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AAJA;AACA;;;;;A","sourceRoot":""}