{"version":3,"file":"static/webpack/static/development/pages/index.js.37f59447d4e7d2d8ba33.hot-update.js","sources":["webpack:///./components/PatternLines.js"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'mineral-ui/Button';\n\nexport default class PatternLines extends PureComponent {\n  static propTypes = {\n    lines: PropTypes.arrayOf(\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.number])),\n    ).isRequired,\n    tilesToPlace: PropTypes.arrayOf(PropTypes.number).isRequired,\n    assignTilesToPatternLines: PropTypes.func.isRequired,\n    playerID: PropTypes.number.isRequired,\n  };\n\n  /**\n   * Determines whether or not player can place tiles at this time.\n   *\n   * @param  {array} line   The line which will stage the tiles.\n   * @param  {array} tiles  Tiles to be placed.\n   * @return {bool}         Whether or not tiles can be placed.\n   */\n  canPlaceTilesInThisRow = (line, tiles) => {\n    // Are there tiles to place?\n    if (tiles.length < 1) {\n      return false;\n    }\n\n    // Is there any room in this row?\n    const emptyPlaces = line.filter(place => place === false);\n    if (emptyPlaces.length === 0) {\n      return false;\n    }\n\n    // If this row is empty than anything can be placed here.\n    if (emptyPlaces.length === line.length) {\n      return true;\n    }\n\n    // Do the tiles that are already in this row match the tiles to be placed?\n    const [tile] = tiles;\n    const [linetype] = line;\n    return tile === linetype;\n  }\n\n  render() {\n    const {\n      lines, tilesToPlace, assignTilesToPatternLines, playerID,\n    } = this.props;\n    const { canPlaceTilesInThisRow } = this;\n    return (\n      <ul>\n        {lines.map((line, index) => (\n          <li>\n            {canPlaceTilesInThisRow(line, tilesToPlace) && (\n              <Button primary onClick={() => assignTilesToPatternLines(playerID, index, tilesToPlace)}>Place tiles in this row</Button>\n            )}\n            <ul>\n              {line.map(tile => (<li><Button>{tile}</Button></li>))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AACA;AADA;AAAA;AACA;AAmBA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAYA;;;;AA3DA;AACA;AADA;AAEA;AAGA;AACA;AACA;AANA;AACA;;;;;A","sourceRoot":""}