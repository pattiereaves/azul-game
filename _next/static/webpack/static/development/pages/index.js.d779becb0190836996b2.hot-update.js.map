{"version":3,"file":"static/webpack/static/development/pages/index.js.d779becb0190836996b2.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Component } from 'react';\nimport localStorage from 'local-storage';\nimport { ThemeProvider } from 'mineral-ui/themes';\nimport Select from 'mineral-ui/Select';\nimport Button from 'mineral-ui/Button';\nimport Player from '../components/Player';\nimport FactoryDisplay from '../components/FactoryDisplay'; // eslint-disable-line\nimport Center from '../components/Center'; // eslint-disable-line\nimport generateTilebag from '../services/tilebag';\n\nexport default class Index extends Component {\n  state = {\n    playerCount: false,\n    currentPlayer: 0,\n    tileBag: generateTilebag(),\n    isReadyToPlay: false,\n    factoryDisplays: [],\n    centerTiles: [],\n    players: [], // eslint-disable-line\n  };\n\n  possiblePlayers = [\n    {\n      text: '2',\n      value: '2',\n    },\n    {\n      text: '3',\n      value: '3',\n    },\n    {\n      text: '4',\n      value: '4',\n    },\n  ];\n\n  possibleFactoryDisplays = [\n    {\n      players: 2,\n      factoryDisplays: 5,\n    },\n    {\n      players: 3,\n      factoryDisplays: 7,\n    },\n    {\n      players: 4,\n      factoryDisplays: 9,\n    },\n  ];\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n  }\n\n  setUpRound = () => {\n    // Layout factory display thingys\n    // Put the tiles on the things.\n    const { playerCount, players } = this.state;\n    const factoryDisplayCount = this.determineFactoryDisplayCount(playerCount);\n\n    const factoryDisplays = Array(factoryDisplayCount)\n      .fill([])\n      .map(() => this.drawTiles());\n\n    // if there are tiles in the bag, give them 4.\n    // Otherwise build a new bag, then give them 4.\n    // <FactoryDisplay tiles=[0,2,4,0] />\n\n    this.setState({ isReadyToPlay: true, factoryDisplays });\n\n    // Update first player.\n    const nextFirstPlayerID = players\n      .findIndex(({ willBeFirstNextRound }) => (willBeFirstNextRound));\n    this.setState({ currentPlayer: nextFirstPlayerID });\n\n    // Reset player boards.\n    const resetPlayers = players.map(player => ({\n      ...player,\n      tilesToPlace: [],\n      willBeFirstNextRound: false,\n      floorLine: [],\n    }));\n    this.setState({ players: resetPlayers });\n  }\n\n  drawTiles = () => {\n    // return 4 tiles.\n    // remove those tiles from the state.\n    const { tileBag } = this.state;\n    const tilesToDraw = tileBag.splice(0, 4);\n    this.setState({ tileBag });\n\n    if (tilesToDraw.length === 4) {\n      return tilesToDraw;\n    }\n\n    // Refresh bag and draw if not enough.\n    const newTilebag = generateTilebag();\n    const newTiles = newTilebag.splice(0, 4);\n    this.setState({ tileBag: newTilebag });\n    return newTiles;\n  }\n\n  handlePlayerSelection = ({ value }) => {\n    const playerCount = Number(value);\n    const players = Array(playerCount).fill({\n      tilesToPlace: [],\n      score: 0,\n      willBeFirstNextRound: false,\n      patternLines: [\n        [false],\n        [false, false],\n        [false, false, false],\n        [false, false, false, false],\n        [false, false, false, false, false],\n      ],\n      floorLine: [],\n    });\n    this.setState({ playerCount, players });\n    localStorage('playerCount', playerCount);\n    localStorage('players', players);\n  };\n\n  hydrateStateWithLocalStorage = () => {\n    const { state } = this;\n\n    Object.keys(state).forEach((key) => {\n      const value = localStorage.get(key);\n\n      if (!value) {\n        return;\n      }\n\n      this.setState({ [key]: value });\n    });\n  };\n\n  determineFactoryDisplayCount = (playerCount) => {\n    if (!playerCount) {\n      return false;\n    }\n\n    const { factoryDisplays } = this.possibleFactoryDisplays\n      .find(({ players }) => (players === playerCount));\n\n    return factoryDisplays;\n  }\n\n  handleTurnEnd = (playerID) => {\n    const { playerCount } = this.state;\n    const nextID = playerID + 1;\n    if (nextID < playerCount) {\n      this.setState({ currentPlayer: nextID });\n      return;\n    }\n\n    // Otherwise start over at the beginning.\n    this.setState({ currentPlayer: 0 });\n  };\n\n  handleTileSelection = (displayID, tileSelection) => {\n    const {\n      factoryDisplays,\n      players,\n      currentPlayer,\n      centerTiles,\n    } = this.state;\n    const activeDisplay = factoryDisplays[displayID];\n\n    // Remove activeDisplay from factory displays.\n    factoryDisplays.splice(displayID, 1);\n    this.setState({ factoryDisplays });\n\n    // Give remaining tiles to center.\n    const remainingTiles = activeDisplay.filter(tile => tile !== tileSelection);\n    const newCenterTiles = centerTiles.concat(remainingTiles);\n    this.setState({ centerTiles: newCenterTiles });\n\n    // Get all of selected files from activeDisplay\n    const playersTiles = activeDisplay.filter(tile => tile === tileSelection);\n    const updatedPlayers = players.reduce((acc, player, index) => {\n      debugger;\n      if (index !== currentPlayer) {\n        return [...acc, player];\n      }\n\n      const tilesToPlace = player.tilesToPlace.concat(playersTiles);\n\n      return [\n        ...acc,\n        {\n          ...player,\n          tilesToPlace,\n        },\n      ];\n    }, []);\n\n    // Give selected tiles from display to current player.\n    this.setState({ players: updatedPlayers });\n  }\n\n  render() {\n    const {\n      possiblePlayers,\n      handlePlayerSelection,\n      handleTurnEnd,\n      handleTileSelection,\n    } = this;\n\n    const {\n      playerCount,\n      currentPlayer,\n      tileBag, // eslint-disable-line\n      isReadyToPlay,\n      factoryDisplays,\n      centerTiles,\n      players,\n    } = this.state;\n\n    return (\n      <ThemeProvider>\n        <div>\n          {!playerCount && (\n            <div>\n              <p>How many players are there?</p>\n              <Select\n                data={possiblePlayers}\n                onChange={handlePlayerSelection}\n                placeholder=\"Choose a number\"\n                required\n              />\n            </div>\n          )}\n          {playerCount && (\n          <div>\n            Player count:\n            {playerCount}\n          </div>\n          )}\n          {!isReadyToPlay && (<Button primary onClick={this.setUpRound}>Draw tiles</Button>)}\n          {isReadyToPlay && factoryDisplays.map((tiles, index) => (\n            <FactoryDisplay\n              displayID={index}\n              tiles={tiles}\n              handleTileSelection={handleTileSelection}\n            />\n          ))}\n          <Center tiles={centerTiles} />\n          {players.map((player, index) => (\n            <Player\n              playerID={index}\n              isCurrentPlayer={index === currentPlayer}\n              handleTurnEnd={handleTurnEnd}\n              data={player}\n            />\n          ))}\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AASA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAXA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AANA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAJA;AAOA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;;;;;AAtJA;AACA;AACA;;;AAqJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;;;;AA1PA;AACA;;;;;A","sourceRoot":""}